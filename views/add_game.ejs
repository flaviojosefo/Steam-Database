<%- include('head'); -%>
	<main>
		<div class="jumbotron jumbo-override">
			<p class="lead"><i class="fa fa-plus"></i> Add a Game to the Store</p>
			<hr class="my-4">
				<form name="gameForm" method="POST" action="/games/add" onsubmit="return validateForm()" onreset="resetGenres()">
					<p>
						<label for="title">Game Title:</label>
						<input type="text" name="title">
					</p>
					<p>
						<label for="steamId">Steam ID:</label>
						<input type="text" name="steamId" style="margin-left: 12px">
						<i id="message" style="color: #dc3545">
							<b><%= gameFoundMessage %></b>
						</i>
					</p>
					<p>
						<label for="genres">Genres:</label>
						<span id="list" style="display: inline-block; height: 30px; margin-left: 26px"></span>
						<button type="button" onclick="addGenre()" class="btn btn-light btn-sm" style="height: 30px; margin-bottom: 5px">
							<i class="fa fa-plus-square" aria-hidden="true"></i> Add Genre
						</button>
					</p>
					<p>
						<label for="developer">Developer:</label>
						<input type="text" name="developer" style="margin-left: 3px">
					</p>
					<p style="margin-left: 83px">
						<input style="margin-right: 5px" type="submit" class="btn btn-success" value="Add Game">
						<input type="reset" class="btn btn-danger" value="Reset">
					</p>
				</form>
		</div>
	</main>
	<script type="text/javascript">
		// The parent element to all selects
		var selectParent = document.getElementById("list");
	
		//Create array of options to be added
		var options = ["Action","Platform","Shooter","Survival","Adventure","Horror","MMO","RPG","Simulation","Strategy"];
		
		// Controllers for box spawns
		var currentOptions = 0;
		const maxOptions = 5;
		
		// Add a genre select box
		function addGenre() {
			// Leave function if maxOptions is reached
			if (currentOptions >= maxOptions) return;
		
			//Create and append select list
			var selectList = document.createElement("select");
			selectList.setAttribute("name", "genres");
			selectList.setAttribute("style", "height: 30px; margin-right: 4px;");
			selectParent.appendChild(selectList);
			
			//Create and append the options
			for (let i = 0; i < options.length; i++) {
				var option = new Option(options[i], options[i]);
				selectList.appendChild(option);
			}
			
			currentOptions++;
		}
		
		function fadeMessage(delayTime) {
			setTimeout(function() {
				$('#message').hide();
			}, delayTime);
		}
		
		// Reset genre boxes
		function resetGenres() {
			// Leave function if no more than 1 option exists
			if (currentOptions <= 1) return;
		
			// Reset the counter
			currentOptions = 0;
			
			// Remove all 'select' children
			selectParent.replaceChildren();
			
			// Re-add the default box
			addGenre();
		}
		
		// Validate all form fields
		function validateForm() {
			// Fetch the form
			const form = document.forms["gameForm"];
			
			// Fetch items of interest and trim empty spaces
			const title = form["title"].value.trim();
			const steamId = form["steamId"].value.trim();
			const developer = form["developer"].value.trim();
			
			// Message to be displayed
			let alertMessage = "";
			
			// Bool to return
			let formValid = true;
			
			if (title.length == 0) {
				alertMessage += "\nInvalid Game Title!";
				formValid = false;
			}
			
			if (steamId.length == 0) {
				alertMessage += "\nInvalid Steam ID!";
				formValid = false;
			}
			
			if (developer.length == 0) {
				alertMessage += "\nInvalid Developer!";
				formValid = false;
			}
			
			if (!formValid) alert(alertMessage);
			
			return formValid;
		}
		
		// Always create one select on page load
		addGenre();
		
		// Fade the message after some time
		fadeMessage(5000);
	</script>
<%- include('foot'); -%>